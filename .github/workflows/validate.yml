name: 'Validate'
on:
  push:
    branches:
    - staging
#    - deploy
#  pull_request:
#    branches:
#    - deploy
#  workflow_dispatch:


permissions: 
  contents: read
 
env:
  CURRENT_BRANCH: ${{ github.head_ref || github.ref_name }}

jobs:
  tf-validate:
    name: 'Validate'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      TF_ACTION_WORKING_DIR: 'Terraform'
    runs-on: ubuntu-latest
    environment: staging
# Use the Bash shell regardless of whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
    - name: current branch
#      run: echo running on branch ${{ github.ref_name }}
#      run: echo running on branch ${GITHUB_REF##*/}
      run: echo running on branch ${CURRENT_BRANCH} 
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
# Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
# Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
# Generates an execution plan for Terraform
    - name: Terraform Validate
      run: terraform validate

  tf-plan:
    name: 'Plan'
    needs: tf-validate
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      TF_ACTION_WORKING_DIR: 'Terraform'
    runs-on: ubuntu-latest
    environment: staging
# Use the Bash shell regardless of whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
# Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
# Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
# Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

  approval:
    name: 'Approve'
    runs-on: ubuntu-latest
    needs: tf-plan
    steps:
      - uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ksubburaj2000
        env:
          TOKEN: ${{ secrets.CUSTOM_PT2_TOKEN }}
